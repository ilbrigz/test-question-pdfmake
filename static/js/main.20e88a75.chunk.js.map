{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["pdfMake","vfs","pdfFonts","questionSchema","Yup","shape","question","required","optionA","trim","optionB","optionC","optionD","App","_useState","useState","_useState2","Object","slicedToArray","title","setTitle","_useState3","_useState4","titleFinal","setTitleFinal","_useState5","_useState6","url","setUrl","_useState7","_useState8","questionRef","setQuestionRef","_useState9","_useState10","questions","setQuestions","useEffect","pdfDefinition","defaultStyle","columnGap","info","author","subject","keywords","content","concat","toConsumableArray","text","style","map","item","index","margin","columns","width","createPdf","getDataUrl","react_default","a","createElement","flexDirection","height","display","id","padding","formik_esm","initialValues","onSubmit","values","_ref","setSubmitting","resetForm","focus","validationSchema","_ref2","touched","errors","dirty","isSubmitting","handleChange","handleBlur","handleReset","Fragment","marginLeft","htmlFor","value","type","onChange","e","target","onKeyDown","key","preventDefault","name","innerRef","el","msg","className","src","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.20e88a75.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport { Formik, ErrorMessage, Field, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport pdfMake from \"pdfmake/build/pdfmake\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\npdfMake.vfs = pdfFonts.pdfMake.vfs;\nconst questionSchema = Yup.object().shape({\n  question: Yup.string().required(\"Queston required\"),\n  optionA: Yup.string()\n    .trim()\n    .required(\"Option A is required\"),\n  optionB: Yup.string()\n    .trim()\n\n    .required(\"Option B is required\"),\n  optionC: Yup.string()\n    .trim()\n\n    .required(\"Option C is required\"),\n  optionD: Yup.string()\n    .trim()\n\n    .required(\"Option D is required\")\n});\n\nconst App = () => {\n  const [title, setTitle] = useState(\"\");\n  const [titleFinal, setTitleFinal] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  const [questionRef, setQuestionRef] = useState(\"\");\n  const [questions, setQuestions] = useState([]);\n  useEffect(() => {\n    const pdfDefinition = {\n      defaultStyle: {\n        columnGap: 20\n      },\n      info: {\n        title: \"awesome Document\",\n        author: \"john doe\",\n        subject: \"subject of document\",\n        keywords: \"keywords for document\"\n      },\n      content: [\n        ...(titleFinal && [\n          {\n            text: `Direction: ${titleFinal}`,\n            style: \"header\"\n          }\n        ]),\n        ...questions.map((item, index) => [\n          {\n            text: `${index + 1}. ${item.question}`,\n            margin: [0, 10, 0, 5]\n          },\n          {\n            columns: [\n              {\n                width: \"*\",\n                text: `a. ${item.optionA}`\n              },\n              { width: \"*\", text: `c. ${item.optionB}` }\n            ]\n          },\n          {\n            columns: [\n              {\n                width: \"*\",\n                text: `b. ${item.optionC}`\n              },\n              { width: \"*\", text: `d. ${item.optionD}` }\n            ]\n          }\n        ])\n      ]\n    };\n    const pdf = pdfMake.createPdf(pdfDefinition);\n    pdf.getDataUrl(url => setUrl(url));\n  }, [questions, titleFinal]);\n\n  return (\n    <div\n      style={{\n        flexDirection: \"row\",\n        height: \"100vh\",\n        display: \"flex\"\n      }}\n      id=\"container\"\n    >\n      <div style={{ padding: \"3rem\", width: \"40%\" }}>\n        <Formik\n          initialValues={{\n            question: \"\",\n            optionA: \"\",\n            optionB: \"\",\n            optionC: \"\",\n            optionD: \"\"\n          }}\n          onSubmit={(values, { setSubmitting, resetForm }) => {\n            resetForm();\n            questionRef.focus();\n            setQuestions([...questions, values]);\n          }}\n          validationSchema={questionSchema}\n        >\n          {({\n            values,\n            touched,\n            errors,\n            dirty,\n            isSubmitting,\n            handleChange,\n            handleBlur,\n\n            handleReset\n          }) => {\n            return (\n              <>\n                <p>Write Your Test Questions</p>\n                {!titleFinal ? (\n                  <>\n                    <label htmlFor=\"\">\n                      Direction: ( Type and Press enter to set Direction. )\n                    </label>\n                    <input\n                      value={title}\n                      type=\"text\"\n                      onChange={e => {\n                        setTitle(e.target.value);\n                        e.target.value = \"\";\n                      }}\n                      onKeyDown={e => {\n                        if (e.key === \"Enter\") {\n                          e.preventDefault();\n                          setTitleFinal(e.target.value);\n                          e.target.value = \"\";\n                          questionRef.focus();\n                        }\n                      }}\n                    />\n                  </>\n                ) : (\n                  <h3 style={{ marginLeft: \"5px\" }}>{titleFinal}</h3>\n                )}\n\n                <Form style={{ display: \"flex\", flexDirection: \"column\" }}>\n                  <label htmlFor=\"\">Question:</label>\n                  <Field\n                    type=\"text\"\n                    name=\"question\"\n                    innerRef={el => {\n                      setQuestionRef(el);\n                    }}\n                  />\n                  <ErrorMessage name=\"question\">\n                    {msg => <div className=\"error\">{msg}</div>}\n                  </ErrorMessage>\n                  <label htmlFor=\"\">Option a:</label>\n\n                  <Field type=\"text\" name=\"optionA\" />\n                  <ErrorMessage name=\"optionA\">\n                    {msg => <div className=\"error\">{msg}</div>}\n                  </ErrorMessage>\n                  <label htmlFor=\"\">Option b:</label>\n\n                  <Field type=\"text\" name=\"optionB\" />\n                  <ErrorMessage name=\"optionB\">\n                    {msg => <div className=\"error\">{msg}</div>}\n                  </ErrorMessage>\n                  <label htmlFor=\"\">Option c:</label>\n                  <Field type=\"text\" name=\"optionC\" />\n                  <ErrorMessage name=\"optionC\">\n                    {msg => <div className=\"error\">{msg}</div>}\n                  </ErrorMessage>\n                  <label htmlFor=\"\">Option d:</label>\n                  <Field type=\"text\" name=\"optionD\" />\n\n                  <ErrorMessage name=\"optionD\">\n                    {msg => <div className=\"error\">{msg}</div>}\n                  </ErrorMessage>\n                  <button type=\"submit\">Add Question</button>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </div>\n      <div style={{ width: \"100%\", height: \"100%\" }}>\n        <iframe\n          style={{\n            width: \"100%\",\n            height: \"100%\"\n          }}\n          src={url}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
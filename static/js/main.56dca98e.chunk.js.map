{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["pdfMake","vfs","pdfFonts","App","_useState","useState","_useState2","Object","slicedToArray","title","setTitle","_useState3","_useState4","titleFinal","setTitleFinal","_useState5","_useState6","url","setUrl","_useState7","_useState8","question","setQuestion","_useState9","_useState10","questions","setQuestions","_useState11","_useState12","optionA","setOptionA","_useState13","_useState14","optionB","setOptionB","_useState15","_useState16","optionC","setOptionC","_useState17","_useState18","optionD","setOptionD","firstInput","useRef","useEffect","pdfDefinition","defaultStyle","columnGap","info","author","subject","keywords","content","concat","toConsumableArray","text","style","map","item","index","margin","columns","width","a","b","c","d","createPdf","getDataUrl","react_default","createElement","display","flexDirection","height","id","padding","marginLeft","Fragment","htmlFor","value","type","onChange","e","target","trim","onKeyDown","key","current","focus","ref","onClick","src","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56dca98e.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport pdfMake from \"pdfmake/build/pdfmake\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\nconst App = () => {\n  const [title, setTitle] = useState(\"\");\n  const [titleFinal, setTitleFinal] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  const [question, setQuestion] = useState(\"\");\n  const [questions, setQuestions] = useState([]);\n  const [optionA, setOptionA] = useState(\"\");\n  const [optionB, setOptionB] = useState(\"\");\n  const [optionC, setOptionC] = useState(\"\");\n  const [optionD, setOptionD] = useState(\"\");\n\n  const firstInput = useRef(0);\n  useEffect(() => {\n    const pdfDefinition = {\n      defaultStyle: {\n        columnGap: 20\n      },\n      info: {\n        title: \"awesome Document\",\n        author: \"john doe\",\n        subject: \"subject of document\",\n        keywords: \"keywords for document\"\n      },\n      content: [\n        ...(titleFinal && [\n          {\n            text: `Direction: ${titleFinal}`,\n            style: \"header\"\n          }\n        ]),\n        ...questions.map((item, index) => [\n          {\n            text: `${index + 1}. ${item.question}`,\n            margin: [0, 10, 0, 5]\n          },\n          {\n            columns: [\n              {\n                width: \"*\",\n                text: `a. ${item.a}`\n              },\n              { width: \"*\", text: `c. ${item.b}` }\n            ]\n          },\n          {\n            columns: [\n              {\n                width: \"*\",\n                text: `b. ${item.c}`\n              },\n              { width: \"*\", text: `d. ${item.d}` }\n            ]\n          }\n        ])\n      ]\n    };\n    const pdf = pdfMake.createPdf(pdfDefinition);\n    pdf.getDataUrl(url => setUrl(url));\n  }, [questions, titleFinal]);\n  const addItem = () => {\n    setQuestions([\n      ...questions,\n      { question, a: optionA, b: optionB, c: optionC, d: optionD }\n    ]);\n    setQuestion(\"\");\n    setOptionA(\"\");\n    setOptionB(\"\");\n    setOptionC(\"\");\n    setOptionD(\"\");\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"row\",\n        height: \"100vh\"\n      }}\n    >\n      <div\n        id=\"container\"\n        style={{\n          width: \"40%\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          padding: \"3rem\"\n        }}\n      >\n        <p>Write Your Test Questions</p>\n        {!titleFinal ? (\n          <>\n            <label htmlFor=\"\">\n              Direction: ( Type and Press enter to set Direction. )\n            </label>\n            <input\n              value={title}\n              type=\"text\"\n              onChange={e => {\n                setTitle(e.target.value.trim());\n                e.target.value = \"\";\n              }}\n              onKeyDown={e => {\n                if (e.key === \"Enter\") {\n                  setTitleFinal(e.target.value.trim());\n                  e.target.value = \"\";\n                  firstInput.current.focus();\n                }\n              }}\n            />\n          </>\n        ) : (\n          <h3 style={{ marginLeft: \"5px\" }}>{titleFinal}</h3>\n        )}\n\n        <label htmlFor=\"\">Question:</label>\n        <textarea\n          ref={firstInput}\n          value={question}\n          onChange={e => {\n            setQuestion(e.target.value.trim());\n            e.target.value = \"\";\n          }}\n        />\n        <label htmlFor=\"\">Option a:</label>\n        <input\n          value={optionA}\n          type=\"text\"\n          onChange={e => {\n            setOptionA(e.target.value.trim());\n            e.target.value = \"\";\n          }}\n        />\n        <label htmlFor=\"\">Option b:</label>\n        <input\n          type=\"text\"\n          value={optionB}\n          onChange={e => {\n            setOptionB(e.target.value.trim());\n            e.target.value = \"\";\n          }}\n        />\n        <label htmlFor=\"\">Option c:</label>\n        <input\n          type=\"text\"\n          value={optionC}\n          onChange={e => {\n            setOptionC(e.target.value.trim());\n            e.target.value = \"\";\n          }}\n        />\n        <label htmlFor=\"\">Option d:</label>\n        <input\n          value={optionD}\n          type=\"text\"\n          onChange={e => {\n            setOptionD(e.target.value.trim());\n            e.target.value = \"\";\n          }}\n        />\n        <button onClick={addItem}>Add Question</button>\n      </div>\n      <div style={{ width: \"100%\", height: \"100%\" }}>\n        <iframe\n          style={{\n            width: \"100%\",\n            height: \"100%\"\n          }}\n          src={url}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}